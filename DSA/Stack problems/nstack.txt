// N STACK IN A STACK----HARD
#include<bits/stdc++.h>
using namespace std;
class Nstack
{
    int *arr;
    int  *top;
    int *next;
    int n;
    int s;
    int freespot;
    public:
    Nstack(int N , int S)
    {
        n=N;
        s=S;
        arr=new int[s];
        top=new int[n];
        next=new int[s];
        // Top initialise 
        for(int i=0;i<n;i++)
        {
            top[i]=-1;
        }
        // next initialise 
        for(int i=0;i<s;i++)
        {
            next[i]=i+1;
        }
        // initialise the last index of next
        next[s-1]=-1;
        // initialise the freespot
        freespot=0;
    }
    bool push(int x,int m)
    {
        if(freespot==-1)
        {
            return false;
        }
        // find index
        int index=freespot;
        freespot=next[index];
        // insert element
        arr[index]=x;
        // update next
        next[index]=top[m-1];
        // update top
        top[m-1]=index;
    }
    int pop(int m)
    {
        if(top[m-1]==-1)
        {
            return -1;
        }
        int index=top[m-1];
        top[m-1]=next[index];
        next[index]=freespot;
        freespot=index;
    }
    void display()
    {
        cout<<"Displaying the N stack\n";
        for(int i=0;i<s;i++)
        {
           cout<<arr[i]<<endl;
        }
    }
};
int main()
{
    Nstack ns(2,6);
    ns.push(4,1);
    ns.push(5,2);
    ns.push(8,4);
    ns.push(9,3);
    ns.push(6,5);
    ns.push(77,7);
    ns.display();

    return 0;
}
